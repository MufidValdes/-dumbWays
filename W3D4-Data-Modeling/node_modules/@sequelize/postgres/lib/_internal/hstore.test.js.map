{
  "version": 3,
  "sources": ["../../src/_internal/hstore.test.ts"],
  "sourcesContent": ["import { expect } from 'chai';\nimport { parseHstore, stringifyHstore } from './hstore';\n\ndescribe('stringifyHstore', () => {\n  it('should handle empty objects correctly', () => {\n    expect(stringifyHstore({})).to.equal('');\n  });\n\n  it('should handle null values correctly', () => {\n    expect(stringifyHstore({ null: null })).to.equal('\"null\"=>NULL');\n  });\n\n  it('should handle null values correctly', () => {\n    expect(stringifyHstore({ foo: null })).to.equal('\"foo\"=>NULL');\n  });\n\n  it('should handle empty string correctly', () => {\n    expect(stringifyHstore({ foo: '' })).to.equal('\"foo\"=>\"\"');\n  });\n\n  it('should handle a string with backslashes correctly', () => {\n    expect(stringifyHstore({ foo: '\\\\' })).to.equal('\"foo\"=>\"\\\\\\\\\"');\n  });\n\n  it('should handle a string with double quotes correctly', () => {\n    expect(stringifyHstore({ foo: '\"\"a\"' })).to.equal('\"foo\"=>\"\\\\\"\\\\\"a\\\\\"\"');\n  });\n\n  it('should handle a string with single quotes correctly', () => {\n    expect(stringifyHstore({ foo: \"''a'\" })).to.equal(\"\\\"foo\\\"=>\\\"''''a''\\\"\");\n  });\n\n  it('should handle simple objects correctly', () => {\n    expect(stringifyHstore({ test: 'value' })).to.equal('\"test\"=>\"value\"');\n  });\n});\n\ndescribe('parseHstore', () => {\n  it('should handle empty string correctly', () => {\n    expect(parseHstore('\"foo\"=>\"\"')).to.deep.equal({ foo: '' });\n  });\n\n  it('should handle a string with double quotes correctly', () => {\n    expect(parseHstore('\"foo\"=>\"\\\\\"\\\\\"a\\\\\"\"')).to.deep.equal({ foo: '\"\"a\"' });\n  });\n\n  it('should handle a string with single quotes correctly', () => {\n    expect(parseHstore(\"\\\"foo\\\"=>\\\"''''a''\\\"\")).to.deep.equal({ foo: \"''a'\" });\n  });\n\n  it('should handle a string with backslashes correctly', () => {\n    expect(parseHstore('\"foo\"=>\"\\\\\\\\\"')).to.deep.equal({ foo: '\\\\' });\n  });\n\n  it('should handle empty objects correctly', () => {\n    expect(parseHstore('')).to.deep.equal({});\n  });\n\n  it('should handle simple objects correctly', () => {\n    expect(parseHstore('\"test\"=>\"value\"')).to.deep.equal({ test: 'value' });\n  });\n\n  // TODO: fork package and fix this\n  it.skip('is not vulnerable to prototype injection', () => {\n    const out = parseHstore('__proto__=>1');\n\n    expect(Object.keys(out)).to.deep.equal(['__proto__']);\n    // eslint-disable-next-line no-proto -- this is not the getter\n    expect(out.__proto__).to.equal(1);\n  });\n});\n\ndescribe('stringify and parse', () => {\n  it('should stringify then parse back the same structure', () => {\n    const testObj = {\n      foo: 'bar',\n      count: '1',\n      emptyString: '',\n      quotyString: '\"\"',\n      extraQuotyString: '\"\"\"a\"\"\"\"\"',\n      backslashes: '\\\\f023',\n      moreBackslashes: '\\\\f\\\\0\\\\2\\\\1',\n      backslashesAndQuotes: '\\\\\"\\\\\"uhoh\"\\\\\"',\n      nully: null,\n    };\n\n    expect(parseHstore(stringifyHstore(testObj))).to.deep.equal(testObj);\n    expect(parseHstore(stringifyHstore(parseHstore(stringifyHstore(testObj))))).to.deep.equal(\n      testObj,\n    );\n  });\n});\n"],
  "mappings": "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",
  "names": []
}
