{
  "version": 3,
  "sources": ["../../src/_internal/data-types-db.ts"],
  "sourcesContent": ["import { getDataTypeParser } from '@sequelize/core/_non-semver-use-at-your-own-risk_/abstract-dialect/data-types-utils.js';\nimport * as BaseTypes from '@sequelize/core/_non-semver-use-at-your-own-risk_/abstract-dialect/data-types.js';\nimport identity from 'lodash/identity';\nimport assert from 'node:assert';\nimport wkx from 'wkx';\nimport type { PostgresDialect } from '../dialect.js';\nimport { parseHstore } from './hstore.js';\nimport { buildRangeParser } from './range.js';\n\n/**\n * First pass of DB value parsing: Parses based on the Postgres Type ID.\n * If a Sequelize DataType is specified, the value is then passed to {@link DataTypes.ABSTRACT#parseDatabaseValue}.\n *\n * @param dialect\n */\nexport function registerPostgresDbDataTypeParsers(dialect: PostgresDialect) {\n  // types & OIDs listed here https://github.com/lib/pq/blob/master/oid/types.go\n  // range & enum are also supported, but use a special path as they are custom types\n\n  // dateonly\n  dialect.registerDataTypeParser(['date'], (value: unknown) => {\n    if (value === 'infinity') {\n      return Number.POSITIVE_INFINITY;\n    }\n\n    if (value === '-infinity') {\n      return Number.NEGATIVE_INFINITY;\n    }\n\n    return value;\n  });\n\n  dialect.registerDataTypeParser(['timestamptz', 'timestamp'], (value: unknown) => {\n    // override default parser to prevent returning a Date object (which is the default behavior in pg).\n    // return dates as string, not Date objects. Different implementations could be used instead (such as Temporal, dayjs)\n    return value;\n  });\n\n  dialect.registerDataTypeParser(['numeric', 'decimal'], (value: unknown) => {\n    if (value === 'NaN') {\n      return Number.NaN;\n    }\n\n    return value;\n  });\n\n  // dialect.registerDataTypeParser(['bool'], (value: unknown) => {\n  //   return value;\n  // });\n\n  dialect.registerDataTypeParser(['geometry'], (value: unknown) => {\n    assert(typeof value === 'string', 'Expected geometry value to be a string');\n\n    const b = Buffer.from(value, 'hex');\n\n    return wkx.Geometry.parse(b).toGeoJSON({ shortCrs: true });\n  });\n\n  dialect.registerDataTypeParser(['geography'], (value: unknown) => {\n    assert(typeof value === 'string', 'Expected geography value to be a string');\n\n    const b = Buffer.from(value, 'hex');\n\n    return wkx.Geometry.parse(b).toGeoJSON({ shortCrs: true });\n  });\n\n  dialect.registerDataTypeParser(['hstore'], (value: unknown) => {\n    assert(typeof value === 'string', 'Expected hstore value to be a string');\n\n    return parseHstore(value);\n  });\n\n  const parseInteger = getDataTypeParser(dialect, BaseTypes.INTEGER);\n  dialect.registerDataTypeParser(['int4range'], buildRangeParser(parseInteger));\n\n  const parseBigInt = getDataTypeParser(dialect, BaseTypes.BIGINT);\n  dialect.registerDataTypeParser(['int8range'], buildRangeParser(parseBigInt));\n\n  const parseDecimal = getDataTypeParser(dialect, BaseTypes.DECIMAL);\n  dialect.registerDataTypeParser(['numrange'], buildRangeParser(parseDecimal));\n\n  // the following ranges are returned as an array of strings in raw queries:\n  // - datetime with time zone\n  // - datetime without time zone\n  // - dateonly\n  // The Sequelize DataType specified by the user will do further parsing of the arrays of strings (like convert values to Date objects).\n  dialect.registerDataTypeParser(['tstzrange', 'tsrange', 'daterange'], buildRangeParser(identity));\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAkC;AAClC,gBAA2B;AAC3B,sBAAqB;AACrB,yBAAmB;AACnB,iBAAgB;AAEhB,oBAA4B;AAC5B,mBAAiC;AAQ1B,SAAS,kCAAkC,SAA0B;AAK1E,UAAQ,uBAAuB,CAAC,MAAM,GAAG,CAAC,UAAmB;AAC3D,QAAI,UAAU,YAAY;AACxB,aAAO,OAAO;AAAA,IAChB;AAEA,QAAI,UAAU,aAAa;AACzB,aAAO,OAAO;AAAA,IAChB;AAEA,WAAO;AAAA,EACT,CAAC;AAED,UAAQ,uBAAuB,CAAC,eAAe,WAAW,GAAG,CAAC,UAAmB;AAG/E,WAAO;AAAA,EACT,CAAC;AAED,UAAQ,uBAAuB,CAAC,WAAW,SAAS,GAAG,CAAC,UAAmB;AACzE,QAAI,UAAU,OAAO;AACnB,aAAO,OAAO;AAAA,IAChB;AAEA,WAAO;AAAA,EACT,CAAC;AAMD,UAAQ,uBAAuB,CAAC,UAAU,GAAG,CAAC,UAAmB;AAC/D,2BAAAA,SAAO,OAAO,UAAU,UAAU,wCAAwC;AAE1E,UAAM,IAAI,OAAO,KAAK,OAAO,KAAK;AAElC,WAAO,WAAAC,QAAI,SAAS,MAAM,CAAC,EAAE,UAAU,EAAE,UAAU,KAAK,CAAC;AAAA,EAC3D,CAAC;AAED,UAAQ,uBAAuB,CAAC,WAAW,GAAG,CAAC,UAAmB;AAChE,2BAAAD,SAAO,OAAO,UAAU,UAAU,yCAAyC;AAE3E,UAAM,IAAI,OAAO,KAAK,OAAO,KAAK;AAElC,WAAO,WAAAC,QAAI,SAAS,MAAM,CAAC,EAAE,UAAU,EAAE,UAAU,KAAK,CAAC;AAAA,EAC3D,CAAC;AAED,UAAQ,uBAAuB,CAAC,QAAQ,GAAG,CAAC,UAAmB;AAC7D,2BAAAD,SAAO,OAAO,UAAU,UAAU,sCAAsC;AAExE,eAAO,2BAAY,KAAK;AAAA,EAC1B,CAAC;AAED,QAAM,mBAAe,2CAAkB,SAAS,UAAU,OAAO;AACjE,UAAQ,uBAAuB,CAAC,WAAW,OAAG,+BAAiB,YAAY,CAAC;AAE5E,QAAM,kBAAc,2CAAkB,SAAS,UAAU,MAAM;AAC/D,UAAQ,uBAAuB,CAAC,WAAW,OAAG,+BAAiB,WAAW,CAAC;AAE3E,QAAM,mBAAe,2CAAkB,SAAS,UAAU,OAAO;AACjE,UAAQ,uBAAuB,CAAC,UAAU,OAAG,+BAAiB,YAAY,CAAC;AAO3E,UAAQ,uBAAuB,CAAC,aAAa,WAAW,WAAW,OAAG,+BAAiB,gBAAAE,OAAQ,CAAC;AAClG;",
  "names": ["assert", "wkx", "identity"]
}
