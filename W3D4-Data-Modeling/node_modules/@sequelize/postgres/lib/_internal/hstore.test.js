"use strict";
var import_chai = require("chai");
var import_hstore = require("./hstore");
describe("stringifyHstore", () => {
  it("should handle empty objects correctly", () => {
    (0, import_chai.expect)((0, import_hstore.stringifyHstore)({})).to.equal("");
  });
  it("should handle null values correctly", () => {
    (0, import_chai.expect)((0, import_hstore.stringifyHstore)({ null: null })).to.equal('"null"=>NULL');
  });
  it("should handle null values correctly", () => {
    (0, import_chai.expect)((0, import_hstore.stringifyHstore)({ foo: null })).to.equal('"foo"=>NULL');
  });
  it("should handle empty string correctly", () => {
    (0, import_chai.expect)((0, import_hstore.stringifyHstore)({ foo: "" })).to.equal('"foo"=>""');
  });
  it("should handle a string with backslashes correctly", () => {
    (0, import_chai.expect)((0, import_hstore.stringifyHstore)({ foo: "\\" })).to.equal('"foo"=>"\\\\"');
  });
  it("should handle a string with double quotes correctly", () => {
    (0, import_chai.expect)((0, import_hstore.stringifyHstore)({ foo: '""a"' })).to.equal('"foo"=>"\\"\\"a\\""');
  });
  it("should handle a string with single quotes correctly", () => {
    (0, import_chai.expect)((0, import_hstore.stringifyHstore)({ foo: "''a'" })).to.equal(`"foo"=>"''''a''"`);
  });
  it("should handle simple objects correctly", () => {
    (0, import_chai.expect)((0, import_hstore.stringifyHstore)({ test: "value" })).to.equal('"test"=>"value"');
  });
});
describe("parseHstore", () => {
  it("should handle empty string correctly", () => {
    (0, import_chai.expect)((0, import_hstore.parseHstore)('"foo"=>""')).to.deep.equal({ foo: "" });
  });
  it("should handle a string with double quotes correctly", () => {
    (0, import_chai.expect)((0, import_hstore.parseHstore)('"foo"=>"\\"\\"a\\""')).to.deep.equal({ foo: '""a"' });
  });
  it("should handle a string with single quotes correctly", () => {
    (0, import_chai.expect)((0, import_hstore.parseHstore)(`"foo"=>"''''a''"`)).to.deep.equal({ foo: "''a'" });
  });
  it("should handle a string with backslashes correctly", () => {
    (0, import_chai.expect)((0, import_hstore.parseHstore)('"foo"=>"\\\\"')).to.deep.equal({ foo: "\\" });
  });
  it("should handle empty objects correctly", () => {
    (0, import_chai.expect)((0, import_hstore.parseHstore)("")).to.deep.equal({});
  });
  it("should handle simple objects correctly", () => {
    (0, import_chai.expect)((0, import_hstore.parseHstore)('"test"=>"value"')).to.deep.equal({ test: "value" });
  });
  it.skip("is not vulnerable to prototype injection", () => {
    const out = (0, import_hstore.parseHstore)("__proto__=>1");
    (0, import_chai.expect)(Object.keys(out)).to.deep.equal(["__proto__"]);
    (0, import_chai.expect)(out.__proto__).to.equal(1);
  });
});
describe("stringify and parse", () => {
  it("should stringify then parse back the same structure", () => {
    const testObj = {
      foo: "bar",
      count: "1",
      emptyString: "",
      quotyString: '""',
      extraQuotyString: '"""a"""""',
      backslashes: "\\f023",
      moreBackslashes: "\\f\\0\\2\\1",
      backslashesAndQuotes: '\\"\\"uhoh"\\"',
      nully: null
    };
    (0, import_chai.expect)((0, import_hstore.parseHstore)((0, import_hstore.stringifyHstore)(testObj))).to.deep.equal(testObj);
    (0, import_chai.expect)((0, import_hstore.parseHstore)((0, import_hstore.stringifyHstore)((0, import_hstore.parseHstore)((0, import_hstore.stringifyHstore)(testObj))))).to.deep.equal(
      testObj
    );
  });
});
//# sourceMappingURL=hstore.test.js.map
