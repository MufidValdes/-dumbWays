{
  "version": 3,
  "sources": ["../src/connection-manager.ts"],
  "sourcesContent": ["import type { AbstractConnection, ConnectionOptions } from '@sequelize/core';\nimport {\n  AbstractConnectionManager,\n  ConnectionError,\n  ConnectionRefusedError,\n  ConnectionTimedOutError,\n  HostNotFoundError,\n  HostNotReachableError,\n  InvalidConnectionError,\n  Sequelize,\n} from '@sequelize/core';\nimport { isValidTimeZone } from '@sequelize/core/_non-semver-use-at-your-own-risk_/utils/dayjs.js';\nimport { logger } from '@sequelize/core/_non-semver-use-at-your-own-risk_/utils/logger.js';\nimport type { ClientConfig } from 'pg';\nimport * as Pg from 'pg';\nimport type { TypeId, TypeParser } from 'pg-types';\nimport { parse as parseArray } from 'postgres-array';\nimport semver from 'semver';\nimport type { PostgresDialect } from './dialect.js';\n\nconst debug = logger.debugContext('connection:pg');\n\ntype TypeFormat = 'text' | 'binary';\n\ninterface TypeOids {\n  oid: number;\n  typeName: string;\n  type: 'base' | 'array' | 'range' | 'range-array';\n  /** oid of the base type. Available on array, range & range-array */\n  baseOid?: number;\n  /** oid of the range. Available on range-array */\n  rangeOid?: number;\n}\n\nexport type PgModule = typeof Pg;\n\nexport interface PostgresConnection extends AbstractConnection, Pg.Client {\n  // custom property we attach to the client\n  // TODO: replace with Symbols.\n  _invalid?: boolean;\n  standard_conforming_strings?: boolean;\n\n  // Private property of pg-client\n  // TODO: ask pg to expose a stable, readonly, property we can use\n  _ending?: boolean;\n}\n\nexport interface PostgresConnectionOptions\n  extends Omit<ClientConfig, 'types' | 'connectionString'> {\n  /**\n   * !! DO NOT SET THIS TO TRUE !!\n   * (unless you know what you're doing)\n   * see [http://www.postgresql.org/message-id/flat/bc9549a50706040852u27633f41ib1e6b09f8339d845@mail.gmail.com#bc9549a50706040852u27633f41ib1e6b09f8339d845@mail.gmail.com]\n   */\n  binary?: boolean;\n\n  /**\n   * see [http://www.postgresql.org/docs/9.3/static/runtime-config-logging.html#GUC-APPLICATION-NAME]\n   * choose the SSL mode with the PGSSLMODE environment variable\n   * object format: [https://github.com/brianc/node-postgres/blob/ee19e74ffa6309c9c5e8e01746261a8f651661f8/lib/connection.js#L79]\n   * see also [http://www.postgresql.org/docs/9.3/static/libpq-ssl.html]\n   * In addition to the values accepted by the corresponding server,\n   * you can use \"auto\" to determine the right encoding from the\n   * current locale in the client (LC_CTYPE environment variable on Unix systems)\n   */\n  client_encoding?: string;\n\n  /**\n   * This should help with backends incorrectly considering idle clients to be dead and prematurely disconnecting them.\n   * this feature has been added in pg module v6.0.0, check pg/CHANGELOG.md\n   * Times out queries after a set time in milliseconds in the database end. Added in pg v7.3\n   * Times out queries after a set time in milliseconds in client end, query would be still running in database end.\n   * Number of milliseconds to wait for connection, default is no timeout.\n   * Terminate any session with an open transaction that has been idle for longer than the specified duration in milliseconds. Added in pg v7.17.0 only supported in postgres >= 10\n   * Maximum wait time for lock requests in milliseconds. Added in pg v8.8.0.\n   */\n  lock_timeout?: number;\n}\n\nexport class PostgresConnectionManager extends AbstractConnectionManager<\n  PostgresDialect,\n  PostgresConnection\n> {\n  readonly #lib: PgModule;\n  readonly #oidMap = new Map<number, TypeOids>();\n  readonly #oidParserCache = new Map<number, TypeParser<any, any>>();\n\n  constructor(dialect: PostgresDialect) {\n    super(dialect);\n\n    const pgModule = dialect.options.pgModule ?? Pg;\n\n    if (dialect.options.native && dialect.options.pgModule) {\n      throw new Error(\n        'You cannot specify both the \"pgModule\" option and the \"native\" option at the same time, as the \"native\" option is only used to use \"pg-native\" as the \"pgModule\" instead of \"pg\"',\n      );\n    }\n\n    if (dialect.options.native && !pgModule.native) {\n      throw new Error(\n        'The \"native\" option was specified, but the \"pg-native\" module is not installed. You must install it to use the native bindings.',\n      );\n    }\n\n    this.#lib = dialect.options.native ? pgModule.native! : pgModule;\n  }\n\n  async connect(config: ConnectionOptions<PostgresDialect>): Promise<PostgresConnection> {\n    const connectionConfig: ClientConfig = {\n      port: 5432,\n      ...config,\n      types: {\n        getTypeParser: (oid: TypeId, format?: TypeFormat) => this.getTypeParser(oid, format),\n      },\n    };\n\n    const connection: PostgresConnection = new this.#lib.Client(connectionConfig);\n\n    await new Promise((resolve, reject) => {\n      let responded = false;\n\n      const parameterHandler = (message: { parameterName: string; parameterValue: string }) => {\n        switch (message.parameterName) {\n          case 'server_version': {\n            const version = semver.coerce(message.parameterValue)?.version;\n            this.sequelize.setDatabaseVersion(\n              version && semver.valid(version) ? version : this.dialect.minimumDatabaseVersion,\n            );\n\n            break;\n          }\n\n          case 'standard_conforming_strings': {\n            connection.standard_conforming_strings = message.parameterValue === 'on';\n            break;\n          }\n\n          default:\n        }\n      };\n\n      const endHandler = () => {\n        debug('connection timeout');\n        if (!responded) {\n          reject(new ConnectionTimedOutError(new Error('Connection timed out')));\n        }\n      };\n\n      // If we didn't ever hear from the client.connect() callback the connection timeout\n      // node-postgres does not treat this as an error since no active query was ever emitted\n      connection.once('end', endHandler);\n\n      if (!this.dialect.options.native) {\n        // Receive various server parameters for further configuration\n        // @ts-expect-error -- undeclared type\n        connection.connection.on('parameterStatus', parameterHandler);\n      }\n\n      connection.connect(err => {\n        responded = true;\n\n        if (!this.dialect.options.native) {\n          // remove parameter handler\n          // @ts-expect-error -- undeclared type\n          connection.connection.removeListener('parameterStatus', parameterHandler);\n        }\n\n        if (err) {\n          // @ts-expect-error -- undeclared type\n          if (err.code) {\n            // @ts-expect-error -- undeclared type\n            switch (err.code) {\n              case 'ECONNREFUSED':\n                reject(new ConnectionRefusedError(err));\n                break;\n              case 'ENOTFOUND':\n                reject(new HostNotFoundError(err));\n                break;\n              case 'EHOSTUNREACH':\n                reject(new HostNotReachableError(err));\n                break;\n              case 'EINVAL':\n                reject(new InvalidConnectionError(err));\n                break;\n              default:\n                reject(new ConnectionError(err));\n                break;\n            }\n          } else {\n            reject(new ConnectionError(err));\n          }\n        } else {\n          debug('connection acquired');\n          connection.removeListener('end', endHandler);\n          resolve(connection);\n        }\n      });\n    });\n\n    // Don't let a Postgres restart (or error) to take down the whole app\n    connection.on('error', (error: any) => {\n      connection._invalid = true;\n      debug(`connection error ${error.code || error.message}`);\n      void this.sequelize.pool.destroy(connection);\n    });\n\n    let query = '';\n\n    if (\n      this.dialect.options.standardConformingStrings !== false &&\n      connection.standard_conforming_strings\n    ) {\n      // Disable escape characters in strings\n      // see https://github.com/sequelize/sequelize/issues/3545 (security issue)\n      // see https://www.postgresql.org/docs/current/static/runtime-config-compatible.html#GUC-STANDARD-CONFORMING-STRINGS\n      query += 'SET standard_conforming_strings=on;';\n    }\n\n    // TODO: make this a connection option\n    const clientMinMessages = this.dialect.options.clientMinMessages ?? 'warning';\n    if (clientMinMessages) {\n      query += `SET client_min_messages TO ${clientMinMessages};`;\n    }\n\n    if (!this.sequelize.options.keepDefaultTimezone) {\n      if (this.sequelize.options.timezone && isValidTimeZone(this.sequelize.options.timezone)) {\n        query += `SET TIME ZONE '${this.sequelize.options.timezone}';`;\n      } else {\n        query += `SET TIME ZONE INTERVAL '${this.sequelize.options.timezone}' HOUR TO MINUTE;`;\n      }\n    }\n\n    if (query) {\n      await connection.query(query);\n    }\n\n    await this.#refreshOidMap(connection);\n\n    return connection;\n  }\n\n  async disconnect(connection: PostgresConnection): Promise<void> {\n    if (connection._ending) {\n      debug('connection tried to disconnect but was already at ENDING state');\n\n      return;\n    }\n\n    await connection.end();\n  }\n\n  validate(connection: PostgresConnection) {\n    return !connection._invalid && !connection._ending;\n  }\n\n  async #refreshOidMap(connection: PostgresConnection | Sequelize): Promise<void> {\n    const sql = `\n      WITH ranges AS (SELECT pg_range.rngtypid,\n                             pg_type.typname  AS rngtypname,\n                             pg_type.typarray AS rngtyparray,\n                             pg_range.rngsubtype\n                      FROM pg_range\n                             LEFT OUTER JOIN pg_type\n                                             ON pg_type.oid = pg_range.rngtypid)\n      SELECT pg_type.typname,\n             pg_type.typtype,\n             pg_type.oid,\n             pg_type.typarray,\n             ranges.rngtypname,\n             ranges.rngtypid,\n             ranges.rngtyparray\n      FROM pg_type\n             LEFT OUTER JOIN ranges\n                             ON pg_type.oid = ranges.rngsubtype\n      WHERE (pg_type.typtype IN ('b', 'e'));\n    `;\n\n    let results;\n    if (connection instanceof Sequelize) {\n      results = (await connection.query(sql)).pop();\n    } else {\n      results = await connection.query(sql);\n    }\n\n    // When searchPath is prepended then two statements are executed and the result is\n    // an array of those two statements. First one is the SET search_path and second is\n    // the SELECT query result.\n    if (Array.isArray(results) && results[0].command === 'SET') {\n      results = results.pop();\n    }\n\n    const oidMap = this.#oidMap;\n    oidMap.clear();\n\n    for (const row of results.rows) {\n      // Mapping base types and their arrays\n      // Array types are declared twice, once as part of the same row as the base type, once as their own row.\n      if (!oidMap.has(row.oid)) {\n        oidMap.set(row.oid, {\n          oid: row.oid,\n          typeName: row.typname,\n          type: 'base',\n        });\n      }\n\n      if (row.typarray) {\n        oidMap.set(row.typarray, {\n          oid: row.typarray,\n          typeName: row.typname,\n          type: 'array',\n          baseOid: row.oid,\n        });\n      }\n\n      if (row.rngtypid) {\n        oidMap.set(row.rngtypid, {\n          oid: row.rngtypid,\n          typeName: row.rngtypname,\n          type: 'range',\n          baseOid: row.oid,\n        });\n      }\n\n      if (row.rngtyparray) {\n        oidMap.set(row.rngtyparray, {\n          oid: row.rngtyparray,\n          typeName: row.rngtypname,\n          type: 'range-array',\n          baseOid: row.oid,\n          rangeOid: row.rngtypid,\n        });\n      }\n    }\n  }\n\n  #buildArrayParser(subTypeParser: (value: string) => unknown): (source: string) => unknown[] {\n    return (source: string) => {\n      return parseArray(source, subTypeParser);\n    };\n  }\n\n  getTypeParser(oid: TypeId, format?: TypeFormat): TypeParser<any, any> {\n    const cachedParser = this.#oidParserCache.get(oid);\n\n    if (cachedParser) {\n      return cachedParser;\n    }\n\n    const customParser = this.#getCustomTypeParser(oid, format);\n    if (customParser) {\n      this.#oidParserCache.set(oid, customParser);\n\n      return customParser;\n    }\n\n    // This verbose switch statement is here because `getTypeParser` is missing a signature\n    // where \"format\" is a union of 'text' and 'binary' and undefined, so TypeScript can't\n    // infer the correct return type.\n    switch (format) {\n      case 'text':\n        return this.#lib.types.getTypeParser(oid, format);\n      case 'binary':\n        return this.#lib.types.getTypeParser(oid, format);\n      default:\n        return this.#lib.types.getTypeParser(oid);\n    }\n  }\n\n  #getCustomTypeParser(oid: TypeId, format?: TypeFormat): TypeParser<any, any> | null {\n    const typeData = this.#oidMap.get(oid);\n\n    if (!typeData) {\n      return null;\n    }\n\n    if (typeData.type === 'range-array') {\n      return this.#buildArrayParser(this.getTypeParser(typeData.rangeOid!, format));\n    }\n\n    if (typeData.type === 'array') {\n      return this.#buildArrayParser(this.getTypeParser(typeData.baseOid!, format));\n    }\n\n    const parser = this.dialect.getParserForDatabaseDataType(typeData.typeName);\n\n    return parser ?? null;\n  }\n\n  /**\n   * Refreshes the local registry of Custom Types (e.g. enum) OIDs\n   */\n  async refreshDynamicOids() {\n    await this.#refreshOidMap(this.sequelize);\n  }\n}\n"],
  "mappings": "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",
  "names": ["semver", "parseArray"]
}
