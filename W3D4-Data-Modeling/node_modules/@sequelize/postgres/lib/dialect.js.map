{
  "version": 3,
  "sources": ["../src/dialect.ts"],
  "sourcesContent": ["import type { Sequelize } from '@sequelize/core';\nimport { AbstractDialect } from '@sequelize/core';\nimport type {\n  BindCollector,\n  DialectSupports,\n} from '@sequelize/core/_non-semver-use-at-your-own-risk_/abstract-dialect/dialect.js';\nimport { parseCommonConnectionUrlOptions } from '@sequelize/core/_non-semver-use-at-your-own-risk_/utils/connection-options.js';\nimport { createSpecifiedOrderedBindCollector } from '@sequelize/core/_non-semver-use-at-your-own-risk_/utils/sql.js';\nimport { getSynchronizedTypeKeys } from '@sequelize/utils';\nimport {\n  BOOLEAN_CONNECTION_OPTION_NAMES,\n  CONNECTION_OPTION_NAMES,\n  NUMBER_CONNECTION_OPTION_NAMES,\n  STRING_CONNECTION_OPTION_NAMES,\n} from './_internal/connection-options.js';\nimport { registerPostgresDbDataTypeParsers } from './_internal/data-types-db.js';\nimport * as DataTypes from './_internal/data-types-overrides.js';\nimport type { PgModule, PostgresConnectionOptions } from './connection-manager.js';\nimport { PostgresConnectionManager } from './connection-manager.js';\nimport { PostgresQueryGenerator } from './query-generator.js';\nimport { PostgresQueryInterface } from './query-interface.js';\nimport { PostgresQuery } from './query.js';\n\nexport interface PostgresDialectOptions {\n  /**\n   * Defines whether the native library shall be used or not.\n   * If true, you need to have `pg-native` installed.\n   *\n   * @default false\n   */\n  native?: boolean;\n\n  /**\n   * The pg library to use.\n   * If not provided, the pg npm library will be used.\n   * Must be compatible with the pg npm library API.\n   *\n   * Using this option should only be considered as a last resort,\n   * as the Sequelize team cannot guarantee its compatibility.\n   */\n  pgModule?: PgModule;\n\n  /**\n   * The PostgreSQL `standard_conforming_strings` session parameter.\n   * Set to `false` to not set the option.\n   * WARNING: Setting this to false may expose vulnerabilities and is not recommended!\n   *\n   * @default true\n   */\n  standardConformingStrings?: boolean;\n\n  /**\n   * The PostgreSql `client_min_messages` session parameter.\n   * Set explicitly to `false` to not override the database's default.\n   * Redshift does not support this parameter, it is important to set this option\n   * to `false` when connecting to Redshift.\n   *\n   * @default 'warning'\n   */\n  clientMinMessages?: string | boolean;\n}\n\nconst DIALECT_OPTION_NAMES = getSynchronizedTypeKeys<PostgresDialectOptions>({\n  clientMinMessages: undefined,\n  native: undefined,\n  pgModule: undefined,\n  standardConformingStrings: undefined,\n});\n\nexport class PostgresDialect extends AbstractDialect<\n  PostgresDialectOptions,\n  PostgresConnectionOptions\n> {\n  static readonly supports: DialectSupports = AbstractDialect.extendSupport({\n    'DEFAULT VALUES': true,\n    EXCEPTION: true,\n    'ON DUPLICATE KEY': false,\n    'ORDER NULLS': true,\n    returnValues: 'returning',\n    bulkDefault: true,\n    schemas: true,\n    multiDatabases: true,\n    lock: true,\n    lockOf: true,\n    lockKey: true,\n    lockOuterJoinFailure: true,\n    skipLocked: true,\n    forShare: 'FOR SHARE',\n    constraints: {\n      deferrable: true,\n      removeOptions: { cascade: true, ifExists: true },\n    },\n    index: {\n      concurrently: true,\n      using: 2,\n      where: true,\n      functionBased: true,\n      operator: true,\n      include: true,\n    },\n    inserts: {\n      onConflictDoNothing: ' ON CONFLICT DO NOTHING',\n      updateOnDuplicate: ' ON CONFLICT DO UPDATE SET',\n      conflictFields: true,\n      onConflictWhere: true,\n    },\n    dataTypes: {\n      ARRAY: true,\n      RANGE: true,\n      GEOMETRY: true,\n      GEOGRAPHY: true,\n      JSON: true,\n      JSONB: true,\n      HSTORE: true,\n      TSVECTOR: true,\n      CITEXT: true,\n      DATETIME: { infinity: true },\n      DATEONLY: { infinity: true },\n      FLOAT: { NaN: true, infinity: true },\n      REAL: { NaN: true, infinity: true },\n      DOUBLE: { NaN: true, infinity: true },\n      DECIMAL: { unconstrained: true, NaN: true, infinity: true },\n      CIDR: true,\n      MACADDR: true,\n      MACADDR8: true,\n      INET: true,\n    },\n    jsonOperations: true,\n    jsonExtraction: {\n      unquoted: true,\n      quoted: true,\n    },\n    REGEXP: true,\n    IREGEXP: true,\n    searchPath: true,\n    escapeStringConstants: true,\n    globalTimeZoneConfig: true,\n    uuidV1Generation: true,\n    uuidV4Generation: true,\n    dropTable: {\n      cascade: true,\n    },\n    truncate: {\n      cascade: true,\n      restartIdentity: true,\n    },\n    removeColumn: {\n      cascade: true,\n      ifExists: true,\n    },\n    renameTable: {\n      changeSchemaAndTable: false,\n    },\n    createSchema: {\n      authorization: true,\n      ifNotExists: true,\n    },\n    dropSchema: {\n      cascade: true,\n      ifExists: true,\n    },\n    startTransaction: {\n      readOnly: true,\n    },\n    delete: {\n      limit: false,\n    },\n  });\n\n  readonly connectionManager: PostgresConnectionManager;\n  readonly queryGenerator: PostgresQueryGenerator;\n  readonly queryInterface: PostgresQueryInterface;\n  readonly Query = PostgresQuery;\n\n  constructor(sequelize: Sequelize, options: PostgresDialectOptions) {\n    super({\n      sequelize,\n      dataTypeOverrides: DataTypes,\n      options,\n      name: 'postgres',\n      minimumDatabaseVersion: '11.0.0',\n      identifierDelimiter: '\"',\n      dataTypesDocumentationUrl: 'https://www.postgresql.org/docs/current/datatype.html',\n    });\n\n    this.connectionManager = new PostgresConnectionManager(this);\n    this.queryGenerator = new PostgresQueryGenerator(this);\n    this.queryInterface = new PostgresQueryInterface(this);\n\n    registerPostgresDbDataTypeParsers(this);\n  }\n\n  createBindCollector(): BindCollector {\n    return createSpecifiedOrderedBindCollector();\n  }\n\n  escapeBuffer(buffer: Buffer): string {\n    const hex = buffer.toString('hex');\n\n    // bytea hex format http://www.postgresql.org/docs/current/static/datatype-binary.html\n    return `'\\\\x${hex}'`;\n  }\n\n  escapeString(value: string): string {\n    // http://www.postgresql.org/docs/8.2/static/sql-syntax-lexical.html#SQL-SYNTAX-STRINGS\n    // http://stackoverflow.com/q/603572/130598\n    value = value\n      .replaceAll(\"'\", \"''\")\n      // null character is not allowed in Postgres\n      .replaceAll('\\0', '\\\\0');\n\n    return `'${value}'`;\n  }\n\n  canBackslashEscape() {\n    // postgres can use \\ to escape if one of these is true:\n    // - standard_conforming_strings is off\n    // - the string is prefixed with E (out of scope for this method)\n    return this.options.standardConformingStrings === false;\n  }\n\n  getDefaultSchema() {\n    return 'public';\n  }\n\n  parseConnectionUrl(url: string): PostgresConnectionOptions {\n    return parseCommonConnectionUrlOptions<PostgresConnectionOptions>({\n      url,\n      allowedProtocols: ['postgres', 'postgresql'],\n      hostname: 'host',\n      port: 'port',\n      pathname: 'database',\n      username: 'user',\n      password: 'password',\n      stringSearchParams: STRING_CONNECTION_OPTION_NAMES,\n      booleanSearchParams: BOOLEAN_CONNECTION_OPTION_NAMES,\n      numberSearchParams: NUMBER_CONNECTION_OPTION_NAMES,\n    });\n  }\n\n  static getSupportedOptions() {\n    return DIALECT_OPTION_NAMES;\n  }\n\n  static getSupportedConnectionOptions() {\n    return CONNECTION_OPTION_NAMES;\n  }\n}\n"],
  "mappings": "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",
  "names": ["import_connection_options"]
}
