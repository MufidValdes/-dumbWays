"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var dialect_exports = {};
__export(dialect_exports, {
  PostgresDialect: () => PostgresDialect
});
module.exports = __toCommonJS(dialect_exports);
var import_core = require("@sequelize/core");
var import_connection_options = require("@sequelize/core/_non-semver-use-at-your-own-risk_/utils/connection-options.js");
var import_sql = require("@sequelize/core/_non-semver-use-at-your-own-risk_/utils/sql.js");
var import_utils = require("@sequelize/utils");
var import_connection_options2 = require("./_internal/connection-options.js");
var import_data_types_db = require("./_internal/data-types-db.js");
var DataTypes = __toESM(require("./_internal/data-types-overrides.js"));
var import_connection_manager = require("./connection-manager.js");
var import_query_generator = require("./query-generator.js");
var import_query_interface = require("./query-interface.js");
var import_query = require("./query.js");
const DIALECT_OPTION_NAMES = (0, import_utils.getSynchronizedTypeKeys)({
  clientMinMessages: void 0,
  native: void 0,
  pgModule: void 0,
  standardConformingStrings: void 0
});
class PostgresDialect extends import_core.AbstractDialect {
  static supports = import_core.AbstractDialect.extendSupport({
    "DEFAULT VALUES": true,
    EXCEPTION: true,
    "ON DUPLICATE KEY": false,
    "ORDER NULLS": true,
    returnValues: "returning",
    bulkDefault: true,
    schemas: true,
    multiDatabases: true,
    lock: true,
    lockOf: true,
    lockKey: true,
    lockOuterJoinFailure: true,
    skipLocked: true,
    forShare: "FOR SHARE",
    constraints: {
      deferrable: true,
      removeOptions: { cascade: true, ifExists: true }
    },
    index: {
      concurrently: true,
      using: 2,
      where: true,
      functionBased: true,
      operator: true,
      include: true
    },
    inserts: {
      onConflictDoNothing: " ON CONFLICT DO NOTHING",
      updateOnDuplicate: " ON CONFLICT DO UPDATE SET",
      conflictFields: true,
      onConflictWhere: true
    },
    dataTypes: {
      ARRAY: true,
      RANGE: true,
      GEOMETRY: true,
      GEOGRAPHY: true,
      JSON: true,
      JSONB: true,
      HSTORE: true,
      TSVECTOR: true,
      CITEXT: true,
      DATETIME: { infinity: true },
      DATEONLY: { infinity: true },
      FLOAT: { NaN: true, infinity: true },
      REAL: { NaN: true, infinity: true },
      DOUBLE: { NaN: true, infinity: true },
      DECIMAL: { unconstrained: true, NaN: true, infinity: true },
      CIDR: true,
      MACADDR: true,
      MACADDR8: true,
      INET: true
    },
    jsonOperations: true,
    jsonExtraction: {
      unquoted: true,
      quoted: true
    },
    REGEXP: true,
    IREGEXP: true,
    searchPath: true,
    escapeStringConstants: true,
    globalTimeZoneConfig: true,
    uuidV1Generation: true,
    uuidV4Generation: true,
    dropTable: {
      cascade: true
    },
    truncate: {
      cascade: true,
      restartIdentity: true
    },
    removeColumn: {
      cascade: true,
      ifExists: true
    },
    renameTable: {
      changeSchemaAndTable: false
    },
    createSchema: {
      authorization: true,
      ifNotExists: true
    },
    dropSchema: {
      cascade: true,
      ifExists: true
    },
    startTransaction: {
      readOnly: true
    },
    delete: {
      limit: false
    }
  });
  connectionManager;
  queryGenerator;
  queryInterface;
  Query = import_query.PostgresQuery;
  constructor(sequelize, options) {
    super({
      sequelize,
      dataTypeOverrides: DataTypes,
      options,
      name: "postgres",
      minimumDatabaseVersion: "11.0.0",
      identifierDelimiter: '"',
      dataTypesDocumentationUrl: "https://www.postgresql.org/docs/current/datatype.html"
    });
    this.connectionManager = new import_connection_manager.PostgresConnectionManager(this);
    this.queryGenerator = new import_query_generator.PostgresQueryGenerator(this);
    this.queryInterface = new import_query_interface.PostgresQueryInterface(this);
    (0, import_data_types_db.registerPostgresDbDataTypeParsers)(this);
  }
  createBindCollector() {
    return (0, import_sql.createSpecifiedOrderedBindCollector)();
  }
  escapeBuffer(buffer) {
    const hex = buffer.toString("hex");
    return `'\\x${hex}'`;
  }
  escapeString(value) {
    value = value.replaceAll("'", "''").replaceAll("\0", "\\0");
    return `'${value}'`;
  }
  canBackslashEscape() {
    return this.options.standardConformingStrings === false;
  }
  getDefaultSchema() {
    return "public";
  }
  parseConnectionUrl(url) {
    return (0, import_connection_options.parseCommonConnectionUrlOptions)({
      url,
      allowedProtocols: ["postgres", "postgresql"],
      hostname: "host",
      port: "port",
      pathname: "database",
      username: "user",
      password: "password",
      stringSearchParams: import_connection_options2.STRING_CONNECTION_OPTION_NAMES,
      booleanSearchParams: import_connection_options2.BOOLEAN_CONNECTION_OPTION_NAMES,
      numberSearchParams: import_connection_options2.NUMBER_CONNECTION_OPTION_NAMES
    });
  }
  static getSupportedOptions() {
    return DIALECT_OPTION_NAMES;
  }
  static getSupportedConnectionOptions() {
    return import_connection_options2.CONNECTION_OPTION_NAMES;
  }
}
//# sourceMappingURL=dialect.js.map
