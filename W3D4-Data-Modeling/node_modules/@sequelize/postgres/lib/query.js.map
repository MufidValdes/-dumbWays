{
  "version": 3,
  "sources": ["../src/query.js"],
  "sourcesContent": ["'use strict';\n\nimport {\n  AbstractQuery,\n  DatabaseError,\n  EmptyResultError,\n  ExclusionConstraintError,\n  ForeignKeyConstraintError,\n  QueryTypes,\n  UniqueConstraintError,\n  UnknownConstraintError,\n  ValidationErrorItem,\n} from '@sequelize/core';\nimport { logger } from '@sequelize/core/_non-semver-use-at-your-own-risk_/utils/logger.js';\nimport escapeRegExp from 'lodash/escapeRegExp';\nimport forOwn from 'lodash/forOwn';\nimport isEmpty from 'lodash/isEmpty';\nimport isEqual from 'lodash/isEqual';\nimport mapKeys from 'lodash/mapKeys';\nimport toPairs from 'lodash/toPairs';\nimport zipObject from 'lodash/zipObject';\n\nconst debug = logger.debugContext('sql:pg');\n\nexport class PostgresQuery extends AbstractQuery {\n  async run(sql, parameters, options) {\n    const { connection } = this;\n\n    if (!isEmpty(this.options.searchPath)) {\n      sql = this.sequelize.queryGenerator.setSearchPath(this.options.searchPath) + sql;\n    }\n\n    if (options?.minifyAliases && this.options.includeAliases) {\n      for (const [alias, original] of toPairs(this.options.includeAliases)\n        // Sorting to replace the longest aliases first to prevent alias collision\n        .sort((a, b) => b[1].length - a[1].length)) {\n        const reg = new RegExp(escapeRegExp(original), 'g');\n\n        sql = sql.replace(reg, alias);\n      }\n    }\n\n    this.sql = sql;\n\n    const query = new Promise((resolve, reject) => {\n      if (parameters && parameters.length > 0) {\n        connection.query(sql, parameters, (error, result) => {\n          error ? reject(error) : resolve(result);\n        });\n      } else {\n        connection.query(sql, (error, result) => (error ? reject(error) : resolve(result)));\n      }\n    });\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    let queryResult;\n\n    try {\n      queryResult = await query;\n    } catch (error) {\n      // set the client so that it will be reaped if the connection resets while executing\n      if (\n        error.code === 'ECONNRESET' ||\n        // https://github.com/sequelize/sequelize/pull/14090\n        // pg-native throws custom exception or libpq formatted errors\n        /Unable to set non-blocking to true/i.test(error) ||\n        /SSL SYSCALL error: EOF detected/i.test(error) ||\n        /Local: Authentication failure/i.test(error) ||\n        // https://github.com/sequelize/sequelize/pull/15144\n        error.message === 'Query read timeout'\n      ) {\n        connection._invalid = true;\n      }\n\n      error.sql = sql;\n      error.parameters = parameters;\n      throw this.formatError(error);\n    }\n\n    complete();\n\n    let rows = Array.isArray(queryResult)\n      ? queryResult.reduce((allRows, r) => allRows.concat(r.rows || []), [])\n      : queryResult.rows;\n    const rowCount = Array.isArray(queryResult)\n      ? queryResult.reduce(\n          (count, r) => (Number.isFinite(r.rowCount) ? count + r.rowCount : count),\n          0,\n        )\n      : queryResult.rowCount || 0;\n\n    if (options?.minifyAliases && this.options.aliasesMapping) {\n      rows = rows.map(row =>\n        toPairs(row).reduce((acc, [key, value]) => {\n          const mapping = this.options.aliasesMapping.get(key);\n          acc[mapping || key] = value;\n\n          return acc;\n        }, {}),\n      );\n    }\n\n    const isTableNameQuery = sql.startsWith('SELECT table_name FROM information_schema.tables');\n    const isRelNameQuery = sql.startsWith('SELECT relname FROM pg_class WHERE oid IN');\n\n    if (isRelNameQuery) {\n      return rows.map(row => ({\n        name: row.relname,\n        tableName: row.relname.split('_')[0],\n      }));\n    }\n\n    if (isTableNameQuery) {\n      return rows.map(row => Object.values(row));\n    }\n\n    if (rows[0] && rows[0].sequelize_caught_exception !== undefined) {\n      if (rows[0].sequelize_caught_exception !== null) {\n        throw this.formatError({\n          sql,\n          parameters,\n          code: '23505',\n          detail: rows[0].sequelize_caught_exception,\n        });\n      }\n\n      for (const row of rows) {\n        delete row.sequelize_caught_exception;\n      }\n    }\n\n    if (this.isShowIndexesQuery()) {\n      for (const row of rows) {\n        let attributes;\n        if (/include \\(([^]*)\\)/gi.test(row.definition)) {\n          attributes = /on .*? (?:using .*?\\s)?\\(([^]*)\\) include \\(([^]*)\\)/gi\n            .exec(row.definition)[1]\n            .split(',');\n        } else {\n          attributes = /on .*? (?:using .*?\\s)?\\(([^]*)\\)/gi.exec(row.definition)[1].split(',');\n        }\n\n        // Map column index in table to column name\n        const columns = zipObject(\n          row.column_indexes,\n          this.sequelize.queryGenerator.fromArray(row.column_names),\n        );\n        delete row.column_indexes;\n        delete row.column_names;\n\n        let field;\n        let attribute;\n\n        // Indkey is the order of attributes in the index, specified by a string of attribute indexes\n        row.fields = row.index_fields\n          .map((indKey, index) => {\n            field = columns[indKey];\n            // for functional indices indKey = 0\n            if (!field) {\n              return null;\n            }\n\n            attribute = attributes[index];\n\n            return {\n              attribute: field,\n              collate: /COLLATE \"(.*?)\"/.test(attribute)\n                ? /COLLATE \"(.*?)\"/.exec(attribute)[1]\n                : undefined,\n              order: attribute.includes('DESC')\n                ? 'DESC'\n                : attribute.includes('ASC')\n                  ? 'ASC'\n                  : undefined,\n              length: undefined,\n            };\n          })\n          .filter(n => n !== null);\n\n        row.includes = row.include_fields\n          .map(indKey => {\n            field = columns[indKey];\n            // for functional indices indKey = 0\n            if (!field) {\n              return null;\n            }\n\n            return field;\n          })\n          .filter(n => n !== null);\n        delete row.columns;\n        delete row.definition;\n        delete row.index_fields;\n        delete row.include_fields;\n      }\n\n      return rows;\n    }\n\n    if (this.isSelectQuery()) {\n      let result = rows;\n      // Postgres will treat tables as case-insensitive, so fix the case\n      // of the returned values to match attributes\n      // TODO [>7]: remove this.sequelize.options.quoteIdentifiers === false\n      if (this.options.raw === false && this.sequelize.options.quoteIdentifiers === false) {\n        const attrsMap = Object.create(null);\n\n        for (const attrName of this.model.modelDefinition.attributes.keys()) {\n          attrsMap[attrName.toLowerCase()] = attrName;\n        }\n\n        result = rows.map(row => {\n          return mapKeys(row, (value, key) => {\n            const targetAttr = attrsMap[key];\n            if (typeof targetAttr === 'string' && targetAttr !== key) {\n              return targetAttr;\n            }\n\n            return key;\n          });\n        });\n      }\n\n      return this.handleSelectQuery(result);\n    }\n\n    if (QueryTypes.DESCRIBE === this.options.type) {\n      const result = {};\n\n      for (const row of rows) {\n        result[row.Field] = {\n          type: row.Type.toUpperCase(),\n          allowNull: row.Null === 'YES',\n          defaultValue: row.Default,\n          comment: row.Comment,\n          special: row.special ? this.sequelize.queryGenerator.fromArray(row.special) : [],\n          primaryKey: row.Constraint === 'PRIMARY KEY',\n        };\n\n        if (result[row.Field].type === 'BOOLEAN') {\n          result[row.Field].defaultValue = { false: false, true: true }[\n            result[row.Field].defaultValue\n          ];\n\n          if (result[row.Field].defaultValue === undefined) {\n            result[row.Field].defaultValue = null;\n          }\n        }\n\n        if (typeof result[row.Field].defaultValue === 'string') {\n          result[row.Field].defaultValue = result[row.Field].defaultValue.replaceAll(\"'\", '');\n\n          if (result[row.Field].defaultValue.includes('::')) {\n            const split = result[row.Field].defaultValue.split('::');\n            if (split[1].toLowerCase() !== 'regclass)') {\n              result[row.Field].defaultValue = split[0];\n            }\n          }\n        }\n      }\n\n      return result;\n    }\n\n    if (this.isShowOrDescribeQuery()) {\n      return rows;\n    }\n\n    if (QueryTypes.BULKUPDATE === this.options.type) {\n      if (!this.options.returning) {\n        return Number.parseInt(rowCount, 10);\n      }\n\n      return this.handleSelectQuery(rows);\n    }\n\n    if (this.isDeleteQuery()) {\n      return Number.parseInt(rowCount, 10);\n    }\n\n    if (this.isInsertQuery() || this.isUpdateQuery() || this.isUpsertQuery()) {\n      if (this.instance && this.instance.dataValues) {\n        // If we are creating an instance, and we get no rows, the create failed but did not throw.\n        // This probably means a conflict happened and was ignored, to avoid breaking a transaction.\n        if (this.isInsertQuery() && !this.isUpsertQuery() && rowCount === 0) {\n          throw new EmptyResultError();\n        }\n\n        if (rows[0]) {\n          for (const attributeOrColumnName of Object.keys(rows[0])) {\n            const modelDefinition = this.model.modelDefinition;\n\n            // TODO: this should not be searching in both column names & attribute names. It will lead to collisions. Use only one or the other.\n            const attribute =\n              modelDefinition.attributes.get(attributeOrColumnName) ??\n              modelDefinition.columns.get(attributeOrColumnName);\n\n            const updatedValue = this._parseDatabaseValue(\n              rows[0][attributeOrColumnName],\n              attribute?.type,\n            );\n\n            this.instance.set(attribute?.fieldName ?? attributeOrColumnName, updatedValue, {\n              raw: true,\n              comesFromDatabase: true,\n            });\n          }\n        }\n      }\n\n      if (this.isUpsertQuery()) {\n        return [this.instance, null];\n      }\n\n      return [\n        this.instance || (rows && ((this.options.plain && rows[0]) || rows)) || undefined,\n        rowCount,\n      ];\n    }\n\n    if (this.isShowConstraintsQuery()) {\n      return rows;\n    }\n\n    if (this.isRawQuery()) {\n      return [rows, queryResult];\n    }\n\n    return rows;\n  }\n\n  formatError(err) {\n    let match;\n    let table;\n    let index;\n    let fields;\n    let errors;\n    let message;\n\n    const code = err.code || err.sqlState;\n    const errMessage = err.message || err.messagePrimary;\n    const errDetail = err.detail || err.messageDetail;\n\n    switch (code) {\n      case '23503':\n        index = errMessage.match(/violates foreign key constraint \"(.+?)\"/);\n        index = index ? index[1] : undefined;\n        table = errMessage.match(/on table \"(.+?)\"/);\n        table = table ? table[1] : undefined;\n\n        return new ForeignKeyConstraintError({\n          message: errMessage,\n          fields: null,\n          index,\n          table,\n          cause: err,\n        });\n      case '23505':\n        // there are multiple different formats of error messages for this error code\n        // this regex should check at least two\n        if (errDetail && (match = errDetail.replaceAll('\"', '').match(/Key \\((.*?)\\)=\\((.*?)\\)/))) {\n          fields = zipObject(match[1].split(', '), match[2].split(', '));\n          errors = [];\n          message = 'Validation error';\n\n          forOwn(fields, (value, field) => {\n            errors.push(\n              new ValidationErrorItem(\n                this.getUniqueConstraintErrorMessage(field),\n                'unique violation', // ValidationErrorItem.Origins.DB,\n                field,\n                value,\n                this.instance,\n                'not_unique',\n              ),\n            );\n          });\n\n          if (this.model) {\n            for (const index of this.model.getIndexes()) {\n              if (index.unique && isEqual(index.fields, Object.keys(fields)) && index.msg) {\n                message = index.msg;\n                break;\n              }\n            }\n          }\n\n          return new UniqueConstraintError({ message, errors, cause: err, fields });\n        }\n\n        return new UniqueConstraintError({\n          message: errMessage,\n          cause: err,\n        });\n\n      case '23P01':\n        match = errDetail.match(/Key \\((.*?)\\)=\\((.*?)\\)/);\n\n        if (match) {\n          fields = zipObject(match[1].split(', '), match[2].split(', '));\n        }\n\n        message = 'Exclusion constraint error';\n\n        return new ExclusionConstraintError({\n          message,\n          constraint: err.constraint,\n          fields,\n          table: err.table,\n          cause: err,\n        });\n\n      case '42704':\n        if (err.sql && /(constraint|index)/gi.test(err.sql)) {\n          message = 'Unknown constraint error';\n          index = errMessage.match(/(?:constraint|index) \"(.+?)\"/i);\n          index = index ? index[1] : undefined;\n          table = errMessage.match(/relation \"(.+?)\"/i);\n          table = table ? table[1] : undefined;\n\n          throw new UnknownConstraintError({\n            message,\n            constraint: index,\n            fields,\n            table,\n            cause: err,\n          });\n        }\n\n      // falls through\n      default:\n        return new DatabaseError(err);\n    }\n  }\n\n  getInsertIdField() {\n    return 'id';\n  }\n}\n"],
  "mappings": "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",
  "names": ["isEmpty", "toPairs", "escapeRegExp", "zipObject", "mapKeys", "forOwn", "index", "isEqual"]
}
